//
// WebhookHeader.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Webhook Header */
public struct WebhookHeader: Codable, JSONEncodable, Hashable {

    /** App ID */
    public var appId: Int?
    /** Date of creation */
    public var dateCreated: Date?
    /** Date of last update */
    public var dateLastModified: Date?
    public var id: Int?
    /** Header Key */
    public var key: String?
    /** Header Value */
    public var value: String?
    /** ID of the webhook the header belongs to */
    public var webhookId: Int?

    public init(appId: Int? = nil, dateCreated: Date? = nil, dateLastModified: Date? = nil, id: Int? = nil, key: String? = nil, value: String? = nil, webhookId: Int? = nil) {
        self.appId = appId
        self.dateCreated = dateCreated
        self.dateLastModified = dateLastModified
        self.id = id
        self.key = key
        self.value = value
        self.webhookId = webhookId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case appId = "app_id"
        case dateCreated = "date_created"
        case dateLastModified = "date_last_modified"
        case id
        case key
        case value
        case webhookId = "webhook_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateLastModified, forKey: .dateLastModified)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(key, forKey: .key)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(webhookId, forKey: .webhookId)
    }
}

