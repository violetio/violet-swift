//
// BagDiscount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Bag Discount */
public struct BagDiscount: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case pending = "PENDING"
        case applied = "APPLIED"
        case invalid = "INVALID"
        case notSupported = "NOT_SUPPORTED"
        case error = "ERROR"
        case expired = "EXPIRED"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case code = "CODE"
    }
    public enum ValueType: String, Codable, CaseIterable {
        case amount = "AMOUNT"
        case percentage = "PERCENTAGE"
    }
    /** Amount of discount */
    public var amount: Int?
    /** Total amount of discount applied to bag */
    public var amountTotal: Int?
    /** ID of the Bag this discount belong to */
    public var bagId: Int64?
    /** Code of discount */
    public var code: String?
    /** Date of creation */
    public var dateCreated: Date?
    /** Date of last bag discount update */
    public var dateLastModified: Date?
    /** External ID of discount */
    public var externalId: String?
    public var id: Int64?
    /** Percentage of discount */
    public var percentage: Double?
    /** Status of discount */
    public var status: Status?
    /** Type of discount */
    public var type: ModelType?
    /** Value type of discount */
    public var valueType: ValueType?

    public init(amount: Int? = nil, amountTotal: Int? = nil, bagId: Int64? = nil, code: String? = nil, dateCreated: Date? = nil, dateLastModified: Date? = nil, externalId: String? = nil, id: Int64? = nil, percentage: Double? = nil, status: Status? = nil, type: ModelType? = nil, valueType: ValueType? = nil) {
        self.amount = amount
        self.amountTotal = amountTotal
        self.bagId = bagId
        self.code = code
        self.dateCreated = dateCreated
        self.dateLastModified = dateLastModified
        self.externalId = externalId
        self.id = id
        self.percentage = percentage
        self.status = status
        self.type = type
        self.valueType = valueType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case amountTotal = "amount_total"
        case bagId = "bag_id"
        case code
        case dateCreated = "date_created"
        case dateLastModified = "date_last_modified"
        case externalId = "external_id"
        case id
        case percentage
        case status
        case type
        case valueType = "value_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(amountTotal, forKey: .amountTotal)
        try container.encodeIfPresent(bagId, forKey: .bagId)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateLastModified, forKey: .dateLastModified)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(percentage, forKey: .percentage)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(valueType, forKey: .valueType)
    }
}

