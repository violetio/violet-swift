//
// OrderError.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Order Error */
public struct OrderError: Codable, JSONEncodable, Hashable {

    public enum Platform: String, Codable, CaseIterable {
        case other = "OTHER"
        case shopify = "SHOPIFY"
        case magento = "MAGENTO"
        case magentoOne = "MAGENTO_ONE"
        case woocommerce = "WOOCOMMERCE"
        case bigcommerce = "BIGCOMMERCE"
        case lightspeed = "LIGHTSPEED"
        case ecwid = "ECWID"
        case yaas = "YAAS"
        case spreecommerce = "SPREECOMMERCE"
        case demandware = "DEMANDWARE"
        case volusion = "VOLUSION"
        case prestashop = "PRESTASHOP"
        case threedcart = "THREEDCART"
        case sylius = "SYLIUS"
        case wix = "WIX"
        case swell = "SWELL"
        case miva = "MIVA"
        case websphere = "WEBSPHERE"
        case oraclecc = "ORACLECC"
        case sapcc = "SAPCC"
        case squarespace = "SQUARESPACE"
        case shopware = "SHOPWARE"
        case commercetools = "COMMERCETOOLS"
        case medusa = "MEDUSA"
        case abicart = "ABICART"
        case spryker = "SPRYKER"
        case mystore = "MYSTORE"
        case centra = "CENTRA"
        case xcart = "XCART"
        case vtex = "VTEX"
        case kibo = "KIBO"
        case saleor = "SALEOR"
        case vendo = "VENDO"
        case digitalriver = "DIGITALRIVER"
        case custom = "CUSTOM"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case externalCreateCart = "EXTERNAL_CREATE_CART"
        case externalAddItem = "EXTERNAL_ADD_ITEM"
        case externalUpdateItem = "EXTERNAL_UPDATE_ITEM"
        case externalRemoveItem = "EXTERNAL_REMOVE_ITEM"
        case externalAddCustomer = "EXTERNAL_ADD_CUSTOMER"
        case externalAddAddresses = "EXTERNAL_ADD_ADDRESSES"
        case externalAddShippingAddress = "EXTERNAL_ADD_SHIPPING_ADDRESS"
        case externalAddBillingAddress = "EXTERNAL_ADD_BILLING_ADDRESS"
        case externalGetShippingMethods = "EXTERNAL_GET_SHIPPING_METHODS"
        case externalSetShippingMethod = "EXTERNAL_SET_SHIPPING_METHOD"
        case externalSetPaymentMethod = "EXTERNAL_SET_PAYMENT_METHOD"
        case externalPriceCart = "EXTERNAL_PRICE_CART"
        case externalSubmitCart = "EXTERNAL_SUBMIT_CART"
        case internalAddItem = "INTERNAL_ADD_ITEM"
        case externalDeleteCart = "EXTERNAL_DELETE_CART"
        case externalCancelOrder = "EXTERNAL_CANCEL_ORDER"
        case externalWriteOrder = "EXTERNAL_WRITE_ORDER"
        case externalMarkOrderAsPaid = "EXTERNAL_MARK_ORDER_AS_PAID"
        case externalAddDiscountCode = "EXTERNAL_ADD_DISCOUNT_CODE"
        case externalRemoveDiscountCode = "EXTERNAL_REMOVE_DISCOUNT_CODE"
    }
    /** Bag ID */
    public var bagId: Int64?
    /** Date of creation */
    public var dateCreated: Date?
    /** Entity ID */
    public var entityId: String?
    public var id: Int64?
    /** Error Message */
    public var message: String?
    /** Order ID */
    public var orderId: Int64?
    public var platform: Platform?
    /** Error Type */
    public var type: ModelType?

    public init(bagId: Int64? = nil, dateCreated: Date? = nil, entityId: String? = nil, id: Int64? = nil, message: String? = nil, orderId: Int64? = nil, platform: Platform? = nil, type: ModelType? = nil) {
        self.bagId = bagId
        self.dateCreated = dateCreated
        self.entityId = entityId
        self.id = id
        self.message = message
        self.orderId = orderId
        self.platform = platform
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bagId = "bag_id"
        case dateCreated = "date_created"
        case entityId = "entity_id"
        case id
        case message
        case orderId = "order_id"
        case platform
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bagId, forKey: .bagId)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(entityId, forKey: .entityId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

