//
// PayoutAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Payout Account of the User. Maps to Stripe Connect Account. */
public struct PayoutAccount: Codable, JSONEncodable, Hashable {

    public enum AccountType: String, Codable, CaseIterable {
        case merchant = "merchant"
        case developer = "developer"
    }
    public enum PaymentService: String, Codable, CaseIterable {
        case stripe = "stripe"
    }
    public enum PaymentServiceAccountType: String, Codable, CaseIterable {
        case express = "express"
        case custom = "custom"
    }
    public enum Status: String, Codable, CaseIterable {
        case incomplete = "INCOMPLETE"
        case complete = "COMPLETE"
        case requiresUpdates = "REQUIRES_UPDATES"
    }
    /** Developer or Merchant ID */
    public var accountId: Int?
    /** Account Type */
    public var accountType: AccountType?
    /** Country Code */
    public var countryCode: String?
    /** Date of account creation */
    public var dateCreated: Date?
    /** Date of last account update */
    public var dateLastModified: Date?
    public var details: PayoutAccountDetails?
    /** External ID */
    public var externalId: String?
    /** ID */
    public var id: Int?
    /** Payment Service used for this payout account */
    public var paymentService: PaymentService?
    /** Type of account in the external payment service */
    public var paymentServiceAccountType: PaymentServiceAccountType?
    /** Status */
    public var status: Status?
    /** Has the account been verified */
    public var verified: Bool?

    public init(accountId: Int? = nil, accountType: AccountType? = nil, countryCode: String? = nil, dateCreated: Date? = nil, dateLastModified: Date? = nil, details: PayoutAccountDetails? = nil, externalId: String? = nil, id: Int? = nil, paymentService: PaymentService? = nil, paymentServiceAccountType: PaymentServiceAccountType? = nil, status: Status? = nil, verified: Bool? = nil) {
        self.accountId = accountId
        self.accountType = accountType
        self.countryCode = countryCode
        self.dateCreated = dateCreated
        self.dateLastModified = dateLastModified
        self.details = details
        self.externalId = externalId
        self.id = id
        self.paymentService = paymentService
        self.paymentServiceAccountType = paymentServiceAccountType
        self.status = status
        self.verified = verified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case accountType = "account_type"
        case countryCode = "country_code"
        case dateCreated = "date_created"
        case dateLastModified = "date_last_modified"
        case details
        case externalId = "external_id"
        case id
        case paymentService = "payment_service"
        case paymentServiceAccountType = "payment_service_account_type"
        case status
        case verified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(accountType, forKey: .accountType)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateLastModified, forKey: .dateLastModified)
        try container.encodeIfPresent(details, forKey: .details)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(paymentService, forKey: .paymentService)
        try container.encodeIfPresent(paymentServiceAccountType, forKey: .paymentServiceAccountType)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(verified, forKey: .verified)
    }
}

