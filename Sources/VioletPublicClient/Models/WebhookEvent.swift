//
// WebhookEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Webhook Event */
public struct WebhookEvent: Codable, JSONEncodable, Hashable {

    public enum EventType: String, Codable, CaseIterable {
        case orderUpdated = "ORDER_UPDATED"
        case orderShipped = "ORDER_SHIPPED"
        case orderCompleted = "ORDER_COMPLETED"
        case orderCanceled = "ORDER_CANCELED"
        case orderRefunded = "ORDER_REFUNDED"
        case orderReturned = "ORDER_RETURNED"
        case merchantConnected = "MERCHANT_CONNECTED"
        case merchantDisconnected = "MERCHANT_DISCONNECTED"
        case offerCreated = "OFFER_CREATED"
        case offerUpdated = "OFFER_UPDATED"
        case offerRemoved = "OFFER_REMOVED"
    }
    public enum Status: String, Codable, CaseIterable {
        case created = "CREATED"
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
    }
    public var id: Int?
    /** App ID */
    public var appId: Int?
    /** ID of the webhook the event occurred on */
    public var webhookId: Int?
    /** ID of entity this event occurred for */
    public var entityId: Int64?
    /** HTTP Status Code */
    public var statusCode: Int?
    /** Response from the remote url */
    public var response: String?
    /** Type of webhook event */
    public var eventType: EventType?
    /** Deliver attempts of the webhook the event */
    public var attempts: Int?
    /** Status of webhook event */
    public var status: Status
    /** Date of creation */
    public var dateCreated: Date?
    /** Date of last update */
    public var dateLastModified: Date?

    public init(id: Int? = nil, appId: Int? = nil, webhookId: Int? = nil, entityId: Int64? = nil, statusCode: Int? = nil, response: String? = nil, eventType: EventType? = nil, attempts: Int? = nil, status: Status, dateCreated: Date? = nil, dateLastModified: Date? = nil) {
        self.id = id
        self.appId = appId
        self.webhookId = webhookId
        self.entityId = entityId
        self.statusCode = statusCode
        self.response = response
        self.eventType = eventType
        self.attempts = attempts
        self.status = status
        self.dateCreated = dateCreated
        self.dateLastModified = dateLastModified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case appId = "app_id"
        case webhookId = "webhook_id"
        case entityId = "entity_id"
        case statusCode = "status_code"
        case response
        case eventType = "event_type"
        case attempts
        case status
        case dateCreated = "date_created"
        case dateLastModified = "date_last_modified"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(webhookId, forKey: .webhookId)
        try container.encodeIfPresent(entityId, forKey: .entityId)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
        try container.encodeIfPresent(response, forKey: .response)
        try container.encodeIfPresent(eventType, forKey: .eventType)
        try container.encodeIfPresent(attempts, forKey: .attempts)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateLastModified, forKey: .dateLastModified)
    }
}

