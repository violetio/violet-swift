//
// OrderPaymentMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Payment Method belonging to an Order */
public struct OrderPaymentMethod: Codable, JSONEncodable, Hashable {

    /** Brand of Card */
    public var brand: String?
    /** Name as it appears on Card */
    public var cardholderName: String?
    /** Is Default Method */
    public var _default: Bool?
    /** Card Expiration Month */
    public var expMonth: Int?
    /** Card Expiration Year */
    public var expYear: Int?
    /** Last Four Numbers on Card */
    public var lastFour: String?
    /** ID of the referenced Payment Method */
    public var paymentMethodId: Int64

    public init(brand: String? = nil, cardholderName: String? = nil, _default: Bool? = nil, expMonth: Int? = nil, expYear: Int? = nil, lastFour: String? = nil, paymentMethodId: Int64) {
        self.brand = brand
        self.cardholderName = cardholderName
        self._default = _default
        self.expMonth = expMonth
        self.expYear = expYear
        self.lastFour = lastFour
        self.paymentMethodId = paymentMethodId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case brand
        case cardholderName = "cardholder_name"
        case _default = "default"
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case lastFour = "last_four"
        case paymentMethodId = "payment_method_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(brand, forKey: .brand)
        try container.encodeIfPresent(cardholderName, forKey: .cardholderName)
        try container.encodeIfPresent(_default, forKey: ._default)
        try container.encodeIfPresent(expMonth, forKey: .expMonth)
        try container.encodeIfPresent(expYear, forKey: .expYear)
        try container.encodeIfPresent(lastFour, forKey: .lastFour)
        try container.encode(paymentMethodId, forKey: .paymentMethodId)
    }
}

