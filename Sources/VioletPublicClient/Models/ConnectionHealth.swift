//
// ConnectionHealth.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The container for all status objects comprising merchant connection health */
public struct ConnectionHealth: Codable, JSONEncodable, Hashable {

    public enum DistributionType: String, Codable, CaseIterable {
        case _public = "PUBLIC"
        case _private = "PRIVATE"
    }
    public enum Platform: String, Codable, CaseIterable {
        case other = "OTHER"
        case shopify = "SHOPIFY"
        case magento = "MAGENTO"
        case magentoOne = "MAGENTO_ONE"
        case woocommerce = "WOOCOMMERCE"
        case bigcommerce = "BIGCOMMERCE"
        case lightspeed = "LIGHTSPEED"
        case ecwid = "ECWID"
        case yaas = "YAAS"
        case spreecommerce = "SPREECOMMERCE"
        case demandware = "DEMANDWARE"
        case volusion = "VOLUSION"
        case prestashop = "PRESTASHOP"
        case threedcart = "THREEDCART"
        case sylius = "SYLIUS"
        case wix = "WIX"
        case swell = "SWELL"
        case miva = "MIVA"
        case websphere = "WEBSPHERE"
        case oraclecc = "ORACLECC"
        case sapcc = "SAPCC"
        case squarespace = "SQUARESPACE"
        case shopware = "SHOPWARE"
        case commercetools = "COMMERCETOOLS"
        case medusa = "MEDUSA"
        case abicart = "ABICART"
        case spryker = "SPRYKER"
        case mystore = "MYSTORE"
        case centra = "CENTRA"
        case xcart = "XCART"
        case vtex = "VTEX"
        case kibo = "KIBO"
        case saleor = "SALEOR"
        case vendo = "VENDO"
        case digitalriver = "DIGITALRIVER"
        case custom = "CUSTOM"
    }
    public var channelConnection: ChannelConnections?
    public var commissionRate: CommissionRate?
    public var connection: Connection?
    /** The distribution type this merchant is set to */
    public var distributionType: DistributionType?
    public var invalidProducts: InvalidProducts?
    /** The id of the merchant this connection health report pertains to */
    public var merchantId: Int?
    /** The name of the merchant this connection health report pertains to */
    public var merchantName: String?
    public var migration: Migration?
    public var offersPublished: OffersPublished?
    public var payoutAccount: Connection?
    /** The eCommerce platform this merchant uses */
    public var platform: Platform?
    public var scopeValidation: ScopeValidation?
    /** The URL Of the Store */
    public var storeUrl: String?
    public var syncStatus: SyncStatus?
    public var termsOfService: TermsOfService?

    public init(channelConnection: ChannelConnections? = nil, commissionRate: CommissionRate? = nil, connection: Connection? = nil, distributionType: DistributionType? = nil, invalidProducts: InvalidProducts? = nil, merchantId: Int? = nil, merchantName: String? = nil, migration: Migration? = nil, offersPublished: OffersPublished? = nil, payoutAccount: Connection? = nil, platform: Platform? = nil, scopeValidation: ScopeValidation? = nil, storeUrl: String? = nil, syncStatus: SyncStatus? = nil, termsOfService: TermsOfService? = nil) {
        self.channelConnection = channelConnection
        self.commissionRate = commissionRate
        self.connection = connection
        self.distributionType = distributionType
        self.invalidProducts = invalidProducts
        self.merchantId = merchantId
        self.merchantName = merchantName
        self.migration = migration
        self.offersPublished = offersPublished
        self.payoutAccount = payoutAccount
        self.platform = platform
        self.scopeValidation = scopeValidation
        self.storeUrl = storeUrl
        self.syncStatus = syncStatus
        self.termsOfService = termsOfService
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channelConnection = "channel_connection"
        case commissionRate = "commission_rate"
        case connection
        case distributionType = "distribution_type"
        case invalidProducts = "invalid_products"
        case merchantId = "merchant_id"
        case merchantName = "merchant_name"
        case migration
        case offersPublished = "offers_published"
        case payoutAccount = "payout_account"
        case platform
        case scopeValidation = "scope_validation"
        case storeUrl = "store_url"
        case syncStatus = "sync_status"
        case termsOfService = "terms_of_service"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(channelConnection, forKey: .channelConnection)
        try container.encodeIfPresent(commissionRate, forKey: .commissionRate)
        try container.encodeIfPresent(connection, forKey: .connection)
        try container.encodeIfPresent(distributionType, forKey: .distributionType)
        try container.encodeIfPresent(invalidProducts, forKey: .invalidProducts)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(merchantName, forKey: .merchantName)
        try container.encodeIfPresent(migration, forKey: .migration)
        try container.encodeIfPresent(offersPublished, forKey: .offersPublished)
        try container.encodeIfPresent(payoutAccount, forKey: .payoutAccount)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(scopeValidation, forKey: .scopeValidation)
        try container.encodeIfPresent(storeUrl, forKey: .storeUrl)
        try container.encodeIfPresent(syncStatus, forKey: .syncStatus)
        try container.encodeIfPresent(termsOfService, forKey: .termsOfService)
    }
}

