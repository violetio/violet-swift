//
// CatalogOffersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CatalogOffersAPI {

    /**
     Get Offers by merchant_id
     
     - parameter merchantId: (path)  
     - parameter page: (query)  (optional, default to 1)
     - parameter size: (query)  (optional, default to 20)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func catalogOffersMerchantsMerchantIdGet(merchantId: Int64, page: Int? = nil, size: Int? = nil, apiResponseQueue: DispatchQueue = VioletProxyClientAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PageOffer?, _ error: Error?) -> Void)) -> RequestTask {
        return catalogOffersMerchantsMerchantIdGetWithRequestBuilder(merchantId: merchantId, page: page, size: size).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Offers by merchant_id
     - GET /catalog/offers/merchants/{merchant_id}
     - Retrieves a page of offers by Merchant ID.
     - parameter merchantId: (path)  
     - parameter page: (query)  (optional, default to 1)
     - parameter size: (query)  (optional, default to 20)
     - returns: RequestBuilder<PageOffer> 
     */
    open class func catalogOffersMerchantsMerchantIdGetWithRequestBuilder(merchantId: Int64, page: Int? = nil, size: Int? = nil) -> RequestBuilder<PageOffer> {
        var localVariablePath = "/catalog/offers/merchants/{merchant_id}"
        let merchantIdPreEscape = "\(APIHelper.mapValueToPathItem(merchantId))"
        let merchantIdPostEscape = merchantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{merchant_id}", with: merchantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = VioletProxyClientAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageOffer>.Type = VioletProxyClientAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get Offer by ID
     
     - parameter offerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func catalogOffersOfferIdGet(offerId: Int64, apiResponseQueue: DispatchQueue = VioletProxyClientAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Offer?, _ error: Error?) -> Void)) -> RequestTask {
        return catalogOffersOfferIdGetWithRequestBuilder(offerId: offerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Offer by ID
     - GET /catalog/offers/{offer_id}
     - Retrieves a single offer by ID.
     - parameter offerId: (path)  
     - returns: RequestBuilder<Offer> 
     */
    open class func catalogOffersOfferIdGetWithRequestBuilder(offerId: Int64) -> RequestBuilder<Offer> {
        var localVariablePath = "/catalog/offers/{offer_id}"
        let offerIdPreEscape = "\(APIHelper.mapValueToPathItem(offerId))"
        let offerIdPostEscape = offerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{offer_id}", with: offerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = VioletProxyClientAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Offer>.Type = VioletProxyClientAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
