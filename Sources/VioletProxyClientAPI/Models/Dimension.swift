//
// Dimension.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Individual Product Dimensions */
public struct Dimension: Codable, JSONEncodable, Hashable {

    public enum Measure: String, Codable, CaseIterable {
        case height = "HEIGHT"
        case weight = "WEIGHT"
        case width = "WIDTH"
        case depth = "DEPTH"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case product = "PRODUCT"
        case shipping = "SHIPPING"
    }
    public enum UnitOfMeasure: String, Codable, CaseIterable {
        case inches = "INCHES"
        case feet = "FEET"
        case centimeters = "CENTIMETERS"
        case ounces = "OUNCES"
        case pounds = "POUNDS"
        case grams = "GRAMS"
        case kilograms = "KILOGRAMS"
        case carats = "CARATS"
        case yards = "YARDS"
        case millimeters = "MILLIMETERS"
        case milligrams = "MILLIGRAMS"
        case liters = "LITERS"
        case milliliters = "MILLILITERS"
        case quarts = "QUARTS"
        case quarters = "QUARTERS"
        case gallons = "GALLONS"
        case pints = "PINTS"
    }
    public var id: Int64?
    /** Sku ID */
    public var skuId: Int64
    /** What's being measured */
    public var measure: Measure
    /** Type of Measurement */
    public var type: ModelType
    /** Unit of Measure */
    public var unitOfMeasure: UnitOfMeasure?
    /** Value */
    public var value: Double?

    public init(id: Int64? = nil, skuId: Int64, measure: Measure, type: ModelType, unitOfMeasure: UnitOfMeasure? = nil, value: Double? = nil) {
        self.id = id
        self.skuId = skuId
        self.measure = measure
        self.type = type
        self.unitOfMeasure = unitOfMeasure
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case skuId = "sku_id"
        case measure
        case type
        case unitOfMeasure = "unit_of_measure"
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(skuId, forKey: .skuId)
        try container.encode(measure, forKey: .measure)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(unitOfMeasure, forKey: .unitOfMeasure)
        try container.encodeIfPresent(value, forKey: .value)
    }
}

