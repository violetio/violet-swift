//
// PayoutAccountDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PayoutAccountDetails: Codable, JSONEncodable, Hashable {

    /** Account Holder Name */
    public var accountHolderName: String?
    public var currentlyDue: [String]?
    public var disabledReason: String?
    /** The merchants email */
    public var email: String?
    public var eventuallyDue: [String]?
    public var hasPayoutAccount: Bool?
    /** Legal Entity Address City */
    public var legalEntityAddressCity: String?
    /** Legal Entity Address Country */
    public var legalEntityAddressCountry: String?
    /** Legal Entity Address Line One */
    public var legalEntityAddressLine1: String?
    /** Legal Entity Address Line Two */
    public var legalEntityAddressLine2: String?
    /** Legal Entity Address Postal/Zip Code */
    public var legalEntityAddressPostalCode: String?
    /** Legal Entity Address State */
    public var legalEntityAddressState: String?
    /** Legal Entity Business Name */
    public var legalEntityBusinessName: String?
    /** Legal Entity Business Tax ID */
    public var legalEntityBusinessTaxId: String?
    /** Desired Currency of the Legal Entity */
    public var legalEntityCurrency: String?
    /** Legal Entity Date of Birth */
    public var legalEntityDateOfBirth: Date?
    /** Legal Entity First Name */
    public var legalEntityFirstName: String?
    /** Legal Entity Last Name */
    public var legalEntityLastName: String?
    /** Legal Entity SSN Last Four */
    public var legalEntitySsnLastFour: String?
    /** Legal Entity Type */
    public var legalEntityType: String?
    public var pastDue: [String]?
    public var paymentsEnabled: Bool?
    public var payoutsEnabled: Bool?
    public var pendingVerification: [String]?
    /** The merchants phone number */
    public var phone: String?
    /** Has SSN Last 4 been provided */
    public var ssnLast4Provided: Bool?
    /** The merchants desired statement descriptor */
    public var statementDescriptor: String?
    /** Have the TOS been accepted */
    public var tosAccepted: Bool?
    /** The merchants website */
    public var websiteUrl: String?

    public init(accountHolderName: String? = nil, currentlyDue: [String]? = nil, disabledReason: String? = nil, email: String? = nil, eventuallyDue: [String]? = nil, hasPayoutAccount: Bool? = nil, legalEntityAddressCity: String? = nil, legalEntityAddressCountry: String? = nil, legalEntityAddressLine1: String? = nil, legalEntityAddressLine2: String? = nil, legalEntityAddressPostalCode: String? = nil, legalEntityAddressState: String? = nil, legalEntityBusinessName: String? = nil, legalEntityBusinessTaxId: String? = nil, legalEntityCurrency: String? = nil, legalEntityDateOfBirth: Date? = nil, legalEntityFirstName: String? = nil, legalEntityLastName: String? = nil, legalEntitySsnLastFour: String? = nil, legalEntityType: String? = nil, pastDue: [String]? = nil, paymentsEnabled: Bool? = nil, payoutsEnabled: Bool? = nil, pendingVerification: [String]? = nil, phone: String? = nil, ssnLast4Provided: Bool? = nil, statementDescriptor: String? = nil, tosAccepted: Bool? = nil, websiteUrl: String? = nil) {
        self.accountHolderName = accountHolderName
        self.currentlyDue = currentlyDue
        self.disabledReason = disabledReason
        self.email = email
        self.eventuallyDue = eventuallyDue
        self.hasPayoutAccount = hasPayoutAccount
        self.legalEntityAddressCity = legalEntityAddressCity
        self.legalEntityAddressCountry = legalEntityAddressCountry
        self.legalEntityAddressLine1 = legalEntityAddressLine1
        self.legalEntityAddressLine2 = legalEntityAddressLine2
        self.legalEntityAddressPostalCode = legalEntityAddressPostalCode
        self.legalEntityAddressState = legalEntityAddressState
        self.legalEntityBusinessName = legalEntityBusinessName
        self.legalEntityBusinessTaxId = legalEntityBusinessTaxId
        self.legalEntityCurrency = legalEntityCurrency
        self.legalEntityDateOfBirth = legalEntityDateOfBirth
        self.legalEntityFirstName = legalEntityFirstName
        self.legalEntityLastName = legalEntityLastName
        self.legalEntitySsnLastFour = legalEntitySsnLastFour
        self.legalEntityType = legalEntityType
        self.pastDue = pastDue
        self.paymentsEnabled = paymentsEnabled
        self.payoutsEnabled = payoutsEnabled
        self.pendingVerification = pendingVerification
        self.phone = phone
        self.ssnLast4Provided = ssnLast4Provided
        self.statementDescriptor = statementDescriptor
        self.tosAccepted = tosAccepted
        self.websiteUrl = websiteUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountHolderName = "account_holder_name"
        case currentlyDue
        case disabledReason
        case email
        case eventuallyDue
        case hasPayoutAccount
        case legalEntityAddressCity = "legal_entity_address_city"
        case legalEntityAddressCountry = "legal_entity_address_country"
        case legalEntityAddressLine1 = "legal_entity_address_line_1"
        case legalEntityAddressLine2 = "legal_entity_address_line_2"
        case legalEntityAddressPostalCode = "legal_entity_address_postal_code"
        case legalEntityAddressState = "legal_entity_address_state"
        case legalEntityBusinessName = "legal_entity_business_name"
        case legalEntityBusinessTaxId = "legal_entity_business_tax_id"
        case legalEntityCurrency = "legal_entity_currency"
        case legalEntityDateOfBirth = "legal_entity_date_of_birth"
        case legalEntityFirstName = "legal_entity_first_name"
        case legalEntityLastName = "legal_entity_last_name"
        case legalEntitySsnLastFour = "legal_entity_ssn_last_four"
        case legalEntityType = "legal_entity_type"
        case pastDue
        case paymentsEnabled
        case payoutsEnabled
        case pendingVerification
        case phone
        case ssnLast4Provided = "ssn_last_4_provided"
        case statementDescriptor = "statement_descriptor"
        case tosAccepted
        case websiteUrl = "website_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountHolderName, forKey: .accountHolderName)
        try container.encodeIfPresent(currentlyDue, forKey: .currentlyDue)
        try container.encodeIfPresent(disabledReason, forKey: .disabledReason)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(eventuallyDue, forKey: .eventuallyDue)
        try container.encodeIfPresent(hasPayoutAccount, forKey: .hasPayoutAccount)
        try container.encodeIfPresent(legalEntityAddressCity, forKey: .legalEntityAddressCity)
        try container.encodeIfPresent(legalEntityAddressCountry, forKey: .legalEntityAddressCountry)
        try container.encodeIfPresent(legalEntityAddressLine1, forKey: .legalEntityAddressLine1)
        try container.encodeIfPresent(legalEntityAddressLine2, forKey: .legalEntityAddressLine2)
        try container.encodeIfPresent(legalEntityAddressPostalCode, forKey: .legalEntityAddressPostalCode)
        try container.encodeIfPresent(legalEntityAddressState, forKey: .legalEntityAddressState)
        try container.encodeIfPresent(legalEntityBusinessName, forKey: .legalEntityBusinessName)
        try container.encodeIfPresent(legalEntityBusinessTaxId, forKey: .legalEntityBusinessTaxId)
        try container.encodeIfPresent(legalEntityCurrency, forKey: .legalEntityCurrency)
        try container.encodeIfPresent(legalEntityDateOfBirth, forKey: .legalEntityDateOfBirth)
        try container.encodeIfPresent(legalEntityFirstName, forKey: .legalEntityFirstName)
        try container.encodeIfPresent(legalEntityLastName, forKey: .legalEntityLastName)
        try container.encodeIfPresent(legalEntitySsnLastFour, forKey: .legalEntitySsnLastFour)
        try container.encodeIfPresent(legalEntityType, forKey: .legalEntityType)
        try container.encodeIfPresent(pastDue, forKey: .pastDue)
        try container.encodeIfPresent(paymentsEnabled, forKey: .paymentsEnabled)
        try container.encodeIfPresent(payoutsEnabled, forKey: .payoutsEnabled)
        try container.encodeIfPresent(pendingVerification, forKey: .pendingVerification)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(ssnLast4Provided, forKey: .ssnLast4Provided)
        try container.encodeIfPresent(statementDescriptor, forKey: .statementDescriptor)
        try container.encodeIfPresent(tosAccepted, forKey: .tosAccepted)
        try container.encodeIfPresent(websiteUrl, forKey: .websiteUrl)
    }
}

