//
// OfferSearchRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Offer Search Request */
public struct OfferSearchRequest: Codable, JSONEncodable, Hashable {

    /** External ID */
    public var externalId: String?
    public var id: Int64?
    /** Maximum Price */
    public var maxPrice: Int?
    public var merchantId: Int?
    /** Minimum Price */
    public var minPrice: Int?
    /** Name of Product in Offer */
    public var name: String?
    /** The parent/container product ID */
    public var productId: String?
    /** Publishing status */
    public var publishingStatus: String?
    /** Name of Merchant Selling Product */
    public var seller: String?
    /** Property to sort by in camelCase */
    public var sortBy: String?
    /** Direction to sort by */
    public var sortDirection: String?
    /** Subscription status */
    public var subscriptionStatus: String?
    /** Name of Original Vendor (Brand) */
    public var vendor: String?

    public init(externalId: String? = nil, id: Int64? = nil, maxPrice: Int? = nil, merchantId: Int? = nil, minPrice: Int? = nil, name: String? = nil, productId: String? = nil, publishingStatus: String? = nil, seller: String? = nil, sortBy: String? = nil, sortDirection: String? = nil, subscriptionStatus: String? = nil, vendor: String? = nil) {
        self.externalId = externalId
        self.id = id
        self.maxPrice = maxPrice
        self.merchantId = merchantId
        self.minPrice = minPrice
        self.name = name
        self.productId = productId
        self.publishingStatus = publishingStatus
        self.seller = seller
        self.sortBy = sortBy
        self.sortDirection = sortDirection
        self.subscriptionStatus = subscriptionStatus
        self.vendor = vendor
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case externalId = "external_id"
        case id
        case maxPrice = "max_price"
        case merchantId = "merchant_id"
        case minPrice = "min_price"
        case name
        case productId = "product_id"
        case publishingStatus = "publishing_status"
        case seller
        case sortBy = "sort_by"
        case sortDirection = "sort_direction"
        case subscriptionStatus = "subscription_status"
        case vendor
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(maxPrice, forKey: .maxPrice)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(minPrice, forKey: .minPrice)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(publishingStatus, forKey: .publishingStatus)
        try container.encodeIfPresent(seller, forKey: .seller)
        try container.encodeIfPresent(sortBy, forKey: .sortBy)
        try container.encodeIfPresent(sortDirection, forKey: .sortDirection)
        try container.encodeIfPresent(subscriptionStatus, forKey: .subscriptionStatus)
        try container.encodeIfPresent(vendor, forKey: .vendor)
    }
}

