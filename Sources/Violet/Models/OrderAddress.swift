//
// OrderAddress.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The shipping or billing address of a user placing an order */
public struct OrderAddress: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case shipping = "SHIPPING"
        case billing = "BILLING"
    }
    /** First line of the Address */
    public var address1: String?
    /** Second line of the Address */
    public var address2: String?
    /** City */
    public var city: String?
    /** Country ISO2 Code */
    public var country: String?
    /** Email Address */
    public var email: String?
    public var firstName: String?
    public var lastName: String?
    /** Name on Address */
    public var name: String?
    /** Phone Number */
    public var phone: String?
    /** Postal/Zip Code */
    public var postalCode: String?
    /** State Abbreviation */
    public var state: String?
    /** Address Type */
    public var type: ModelType?

    public init(address1: String? = nil, address2: String? = nil, city: String? = nil, country: String? = nil, email: String? = nil, firstName: String? = nil, lastName: String? = nil, name: String? = nil, phone: String? = nil, postalCode: String? = nil, state: String? = nil, type: ModelType? = nil) {
        self.address1 = address1
        self.address2 = address2
        self.city = city
        self.country = country
        self.email = email
        self.firstName = firstName
        self.lastName = lastName
        self.name = name
        self.phone = phone
        self.postalCode = postalCode
        self.state = state
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address1 = "address_1"
        case address2 = "address_2"
        case city
        case country
        case email
        case firstName
        case lastName
        case name
        case phone
        case postalCode = "postal_code"
        case state
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

