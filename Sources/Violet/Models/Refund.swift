//
// Refund.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Order Refund */
public struct Refund: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case processing = "PROCESSING"
        case completed = "COMPLETED"
        case canceled = "CANCELED"
        case partiallyCompleted = "PARTIALLY_COMPLETED"
        case failed = "FAILED"
        case external = "EXTERNAL"
    }
    /** Amount being refunded */
    public var amount: Int?
    /** ID of the App that created the Order */
    public var appId: Int?
    /** ID of the Bag being refunded */
    public var bagId: Int64?
    /** Date of creation */
    public var dateCreated: Date?
    /** Date of last update */
    public var dateLastModified: Date?
    /** Amount being taken back from the associated transfer to the developer */
    public var developerTransferReversalAmountUsd: Int?
    /** List of errors associated to this refund during processing. */
    public var errors: Set<RefundErrors>?
    /** ID of the refund on the external commerce platform. */
    public var externalId: String?
    /** ID of the Transaction in the Payment Gateway */
    public var gatewayTransactionId: String?
    public var id: Int64?
    /** ID of the merchant making the refund */
    public var merchantId: Int?
    /** Amount being taken back from the associated transfer to the merchant */
    public var merchantTransferReversalAmountUsd: Int?
    /** ID of the Order being refunded */
    public var orderId: Int64?
    /** Reason for refund */
    public var reason: String?
    /** Currency set for this refund by the external ecom platform */
    public var refundCurrency: String?
    /** SKUs the refund applies to */
    public var skus: Set<RefundOrderSku>?
    /** Status of the Refund */
    public var status: Status?
    /** ID of the Transaction being refunded */
    public var transactionId: Int64?

    public init(amount: Int? = nil, appId: Int? = nil, bagId: Int64? = nil, dateCreated: Date? = nil, dateLastModified: Date? = nil, developerTransferReversalAmountUsd: Int? = nil, errors: Set<RefundErrors>? = nil, externalId: String? = nil, gatewayTransactionId: String? = nil, id: Int64? = nil, merchantId: Int? = nil, merchantTransferReversalAmountUsd: Int? = nil, orderId: Int64? = nil, reason: String? = nil, refundCurrency: String? = nil, skus: Set<RefundOrderSku>? = nil, status: Status? = nil, transactionId: Int64? = nil) {
        self.amount = amount
        self.appId = appId
        self.bagId = bagId
        self.dateCreated = dateCreated
        self.dateLastModified = dateLastModified
        self.developerTransferReversalAmountUsd = developerTransferReversalAmountUsd
        self.errors = errors
        self.externalId = externalId
        self.gatewayTransactionId = gatewayTransactionId
        self.id = id
        self.merchantId = merchantId
        self.merchantTransferReversalAmountUsd = merchantTransferReversalAmountUsd
        self.orderId = orderId
        self.reason = reason
        self.refundCurrency = refundCurrency
        self.skus = skus
        self.status = status
        self.transactionId = transactionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case appId = "app_id"
        case bagId = "bag_id"
        case dateCreated = "date_created"
        case dateLastModified = "date_last_modified"
        case developerTransferReversalAmountUsd = "developer_transfer_reversal_amount_usd"
        case errors
        case externalId = "external_id"
        case gatewayTransactionId = "gateway_transaction_id"
        case id
        case merchantId = "merchant_id"
        case merchantTransferReversalAmountUsd = "merchant_transfer_reversal_amount_usd"
        case orderId = "order_id"
        case reason
        case refundCurrency = "refund_currency"
        case skus
        case status
        case transactionId = "transaction_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(bagId, forKey: .bagId)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateLastModified, forKey: .dateLastModified)
        try container.encodeIfPresent(developerTransferReversalAmountUsd, forKey: .developerTransferReversalAmountUsd)
        try container.encodeIfPresent(errors, forKey: .errors)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(gatewayTransactionId, forKey: .gatewayTransactionId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(merchantTransferReversalAmountUsd, forKey: .merchantTransferReversalAmountUsd)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encodeIfPresent(refundCurrency, forKey: .refundCurrency)
        try container.encodeIfPresent(skus, forKey: .skus)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
    }
}

