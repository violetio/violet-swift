//
// AuthRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AuthRequest: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case pending = "PENDING"
        case completed = "COMPLETED"
        case expired = "EXPIRED"
    }
    public var id: Int64?
    /** App ID */
    public var appId: Int64
    /** ID of User authorizing the App */
    public var userId: Int64
    /** Code used to confirm the request */
    public var code: String?
    /** Authorization Token */
    public var token: String?
    /** Status of the request */
    public var status: Status?
    /** Scope of the requested permissions */
    public var scope: String?
    /** Time the request expires */
    public var dateExpires: Date?

    public init(id: Int64? = nil, appId: Int64, userId: Int64, code: String? = nil, token: String? = nil, status: Status? = nil, scope: String? = nil, dateExpires: Date? = nil) {
        self.id = id
        self.appId = appId
        self.userId = userId
        self.code = code
        self.token = token
        self.status = status
        self.scope = scope
        self.dateExpires = dateExpires
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case appId = "app_id"
        case userId = "user_id"
        case code
        case token
        case status
        case scope
        case dateExpires = "date_expires"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(appId, forKey: .appId)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(dateExpires, forKey: .dateExpires)
    }
}

