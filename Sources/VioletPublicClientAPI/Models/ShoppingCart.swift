//
// ShoppingCart.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Order */
public struct ShoppingCart: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case inProgress = "IN_PROGRESS"
        case processing = "PROCESSING"
        case completed = "COMPLETED"
        case canceled = "CANCELED"
        case partiallyRefunded = "PARTIALLY_REFUNDED"
        case refunded = "REFUNDED"
        case requiresAction = "REQUIRES_ACTION"
    }
    public var id: Int64?
    public var token: String?
    /** ID of the Seller */
    public var sellerId: Int64?
    /** ID of the User placing the order */
    public var userId: Int64?
    /** ID of the App creating the order */
    public var appId: Int64?
    public var customer: OrderCustomer?
    /** Bags in the Order */
    public var bags: [ShoppingBag]?
    public var shippingAddress: OrderAddress?
    public var billingAddress: OrderAddress?
    public var paymentMethod: OrderPaymentMethod?
    /** Subtotal of the Order */
    public var subTotal: Int?
    /** Shipping Total of the Order */
    public var shippingTotal: Int?
    /** Tax Total of the Order */
    public var taxTotal: Int?
    /** Total of the Order */
    public var total: Int?
    /** App Customer ID */
    public var appCustomerId: String?
    /** App Order ID */
    public var appOrderId: String?
    /** Status of the Order */
    public var status: Status
    /** Date of order creation */
    public var dateCreated: Date?
    /** Date of last order update */
    public var dateLastModified: Date?
    /** Is the customer a guest or an authed user. */
    public var guest: Bool? = false
    /** Optional value used to represent an identifier in your system. Max length of 128 characters. */
    public var referralId: String?

    public init(id: Int64? = nil, token: String? = nil, sellerId: Int64? = nil, userId: Int64? = nil, appId: Int64? = nil, customer: OrderCustomer? = nil, bags: [ShoppingBag]? = nil, shippingAddress: OrderAddress? = nil, billingAddress: OrderAddress? = nil, paymentMethod: OrderPaymentMethod? = nil, subTotal: Int? = nil, shippingTotal: Int? = nil, taxTotal: Int? = nil, total: Int? = nil, appCustomerId: String? = nil, appOrderId: String? = nil, status: Status, dateCreated: Date? = nil, dateLastModified: Date? = nil, guest: Bool? = false, referralId: String? = nil) {
        self.id = id
        self.token = token
        self.sellerId = sellerId
        self.userId = userId
        self.appId = appId
        self.customer = customer
        self.bags = bags
        self.shippingAddress = shippingAddress
        self.billingAddress = billingAddress
        self.paymentMethod = paymentMethod
        self.subTotal = subTotal
        self.shippingTotal = shippingTotal
        self.taxTotal = taxTotal
        self.total = total
        self.appCustomerId = appCustomerId
        self.appOrderId = appOrderId
        self.status = status
        self.dateCreated = dateCreated
        self.dateLastModified = dateLastModified
        self.guest = guest
        self.referralId = referralId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case token
        case sellerId = "seller_id"
        case userId = "user_id"
        case appId = "app_id"
        case customer
        case bags
        case shippingAddress = "shipping_address"
        case billingAddress = "billing_address"
        case paymentMethod = "payment_method"
        case subTotal = "sub_total"
        case shippingTotal = "shipping_total"
        case taxTotal = "tax_total"
        case total
        case appCustomerId = "app_customer_id"
        case appOrderId = "app_order_id"
        case status
        case dateCreated = "date_created"
        case dateLastModified = "date_last_modified"
        case guest
        case referralId = "referral_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(sellerId, forKey: .sellerId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(customer, forKey: .customer)
        try container.encodeIfPresent(bags, forKey: .bags)
        try container.encodeIfPresent(shippingAddress, forKey: .shippingAddress)
        try container.encodeIfPresent(billingAddress, forKey: .billingAddress)
        try container.encodeIfPresent(paymentMethod, forKey: .paymentMethod)
        try container.encodeIfPresent(subTotal, forKey: .subTotal)
        try container.encodeIfPresent(shippingTotal, forKey: .shippingTotal)
        try container.encodeIfPresent(taxTotal, forKey: .taxTotal)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(appCustomerId, forKey: .appCustomerId)
        try container.encodeIfPresent(appOrderId, forKey: .appOrderId)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateLastModified, forKey: .dateLastModified)
        try container.encodeIfPresent(guest, forKey: .guest)
        try container.encodeIfPresent(referralId, forKey: .referralId)
    }
}

