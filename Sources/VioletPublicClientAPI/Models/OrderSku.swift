//
// OrderSku.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** SKUs belonging to an Order */
public struct OrderSku: Codable, JSONEncodable, Hashable {

    public var id: Int64?
    /** ID of the Merchant the SKU belongs to */
    public var merchantId: Int?
    /** ID of the App creating the Order */
    public var appId: Int64?
    /** ID of the Product */
    public var productId: String?
    /** ID of the referenced SKU */
    public var skuId: Int64
    /** ID of the SKU on the External Ecommerce Platform */
    public var externalId: String?
    /** Name of the SKU */
    public var name: String?
    /** URL of the thumbnail image */
    public var thumbnail: String?
    /** Quantity of the SKU being purchased */
    public var quantity: Int?
    /** SKU Price */
    public var price: Int?

    public init(id: Int64? = nil, merchantId: Int? = nil, appId: Int64? = nil, productId: String? = nil, skuId: Int64, externalId: String? = nil, name: String? = nil, thumbnail: String? = nil, quantity: Int? = nil, price: Int? = nil) {
        self.id = id
        self.merchantId = merchantId
        self.appId = appId
        self.productId = productId
        self.skuId = skuId
        self.externalId = externalId
        self.name = name
        self.thumbnail = thumbnail
        self.quantity = quantity
        self.price = price
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case merchantId = "merchant_id"
        case appId = "app_id"
        case productId = "product_id"
        case skuId = "sku_id"
        case externalId = "external_id"
        case name
        case thumbnail
        case quantity
        case price
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(appId, forKey: .appId)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encode(skuId, forKey: .skuId)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(thumbnail, forKey: .thumbnail)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(price, forKey: .price)
    }
}

