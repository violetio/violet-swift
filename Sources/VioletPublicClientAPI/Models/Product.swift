//
// Product.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Products */
public struct Product: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case physical = "PHYSICAL"
        case digital = "DIGITAL"
        case virtual = "VIRTUAL"
    }
    public enum Currency: String, Codable, CaseIterable {
        case usd = "USD"
        case gbp = "GBP"
    }
    public enum Gender: String, Codable, CaseIterable {
        case male = "MALE"
        case female = "FEMALE"
        case unisex = "UNISEX"
    }
    public var id: String?
    /** Product Name */
    public var name: String
    /** Product Description */
    public var description: String?
    /** Product Long Description */
    public var longDescription: String?
    /** Product Slug/Handle */
    public var slug: String
    /** Brand */
    public var brand: String?
    /** Is the Product Available */
    public var available: Bool? = false
    /** Is the Product Visible */
    public var visible: Bool? = false
    /** Product Type */
    public var type: ModelType?
    public var currency: Currency?
    /** Minimum Price of the Product */
    public var minPrice: Int?
    /** Maximum Price of the Product */
    public var maxPrice: Int?
    /** Product Variants */
    public var variants: [ProductVariant]?
    /** Merchant Offerings */
    public var offers: [Offer]?
    /** Categories */
    public var categories: [Category]?
    /** Gender */
    public var gender: Gender?
    /** Meta Data */
    public var meta: [Meta]?
    /** Tags */
    public var tags: [String]?
    /** ID's of related products. */
    public var relatedProductIds: [String]?
    /** ID's of Cross Saleable Products. */
    public var crossSaleProductIds: [String]?
    /** List of Global Trade Item Numbers */
    public var gtins: [String]?
    /** The default/cover image of the Product */
    public var defaultImageUrl: String?
    /** Overall Quantity */
    public var qtyAvailable: Int?
    /** The maximum commission rate offered by a merchant. */
    public var maxCommissionRate: Double?
    /** Date of product creation */
    public var dateCreated: Date?
    /** Date of last product update */
    public var dateLastModified: Date?

    public init(id: String? = nil, name: String, description: String? = nil, longDescription: String? = nil, slug: String, brand: String? = nil, available: Bool? = false, visible: Bool? = false, type: ModelType? = nil, currency: Currency? = nil, minPrice: Int? = nil, maxPrice: Int? = nil, variants: [ProductVariant]? = nil, offers: [Offer]? = nil, categories: [Category]? = nil, gender: Gender? = nil, meta: [Meta]? = nil, tags: [String]? = nil, relatedProductIds: [String]? = nil, crossSaleProductIds: [String]? = nil, gtins: [String]? = nil, defaultImageUrl: String? = nil, qtyAvailable: Int? = nil, maxCommissionRate: Double? = nil, dateCreated: Date? = nil, dateLastModified: Date? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.longDescription = longDescription
        self.slug = slug
        self.brand = brand
        self.available = available
        self.visible = visible
        self.type = type
        self.currency = currency
        self.minPrice = minPrice
        self.maxPrice = maxPrice
        self.variants = variants
        self.offers = offers
        self.categories = categories
        self.gender = gender
        self.meta = meta
        self.tags = tags
        self.relatedProductIds = relatedProductIds
        self.crossSaleProductIds = crossSaleProductIds
        self.gtins = gtins
        self.defaultImageUrl = defaultImageUrl
        self.qtyAvailable = qtyAvailable
        self.maxCommissionRate = maxCommissionRate
        self.dateCreated = dateCreated
        self.dateLastModified = dateLastModified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case longDescription = "long_description"
        case slug
        case brand
        case available
        case visible
        case type
        case currency
        case minPrice = "min_price"
        case maxPrice = "max_price"
        case variants
        case offers
        case categories
        case gender
        case meta
        case tags
        case relatedProductIds = "related_product_ids"
        case crossSaleProductIds = "cross_sale_product_ids"
        case gtins
        case defaultImageUrl = "default_image_url"
        case qtyAvailable = "qty_available"
        case maxCommissionRate = "max_commission_rate"
        case dateCreated = "date_created"
        case dateLastModified = "date_last_modified"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(longDescription, forKey: .longDescription)
        try container.encode(slug, forKey: .slug)
        try container.encodeIfPresent(brand, forKey: .brand)
        try container.encodeIfPresent(available, forKey: .available)
        try container.encodeIfPresent(visible, forKey: .visible)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(minPrice, forKey: .minPrice)
        try container.encodeIfPresent(maxPrice, forKey: .maxPrice)
        try container.encodeIfPresent(variants, forKey: .variants)
        try container.encodeIfPresent(offers, forKey: .offers)
        try container.encodeIfPresent(categories, forKey: .categories)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(meta, forKey: .meta)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(relatedProductIds, forKey: .relatedProductIds)
        try container.encodeIfPresent(crossSaleProductIds, forKey: .crossSaleProductIds)
        try container.encodeIfPresent(gtins, forKey: .gtins)
        try container.encodeIfPresent(defaultImageUrl, forKey: .defaultImageUrl)
        try container.encodeIfPresent(qtyAvailable, forKey: .qtyAvailable)
        try container.encodeIfPresent(maxCommissionRate, forKey: .maxCommissionRate)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateLastModified, forKey: .dateLastModified)
    }
}

