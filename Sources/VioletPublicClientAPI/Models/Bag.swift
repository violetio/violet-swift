//
// Bag.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Per Merchant Bag in Order */
public struct Bag: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case inProgress = "IN_PROGRESS"
        case submitted = "SUBMITTED"
        case accepted = "ACCEPTED"
        case completed = "COMPLETED"
        case partiallyRefunded = "PARTIALLY_REFUNDED"
        case refunded = "REFUNDED"
        case rejected = "REJECTED"
        case canceled = "CANCELED"
    }
    public enum FulfillmentStatus: String, Codable, CaseIterable {
        case processing = "PROCESSING"
        case fulfilled = "FULFILLED"
        case partiallyFulfilled = "PARTIALLY_FULFILLED"
        case delivered = "DELIVERED"
        case couldNotDeliver = "COULD_NOT_DELIVER"
        case returned = "RETURNED"
    }
    public enum FinancialStatus: String, Codable, CaseIterable {
        case unpaid = "UNPAID"
        case authorized = "AUTHORIZED"
        case pending = "PENDING"
        case paid = "PAID"
        case partiallyPaid = "PARTIALLY_PAID"
        case refunded = "REFUNDED"
        case partiallyRefunded = "PARTIALLY_REFUNDED"
        case voided = "VOIDED"
    }
    public var id: Int64?
    /** ID of the Order the Bag belongs to */
    public var orderId: Int64
    /** ID of the Merchant the Bag references */
    public var merchantId: Int
    /** ID of the App creating this Bag */
    public var appId: Int64
    /** ID of the Order on the External Ecommerce Platform */
    public var externalId: String?
    /** Status */
    public var status: Status?
    /** Fulfillment Status */
    public var fulfillmentStatus: FulfillmentStatus?
    /** Financial Status */
    public var financialStatus: FinancialStatus?
    /** SKUs added to the bag */
    public var skus: [OrderSku]?
    public var shippingMethod: OrderShippingMethod?
    /** Taxes applied to the bag */
    public var taxes: [OrderTax]
    /** Subtotal of the bag */
    public var subTotal: Int?
    /** Shipping Total of the bag */
    public var shippingTotal: Int?
    /** Tax Total of the bag */
    public var taxTotal: Int?
    /** Total price of the bag */
    public var total: Int?
    /** Transactions of the bag */
    public var transactions: [Transaction]?
    /** If bag is tracked externally */
    public var externalCheckout: Bool? = false
    /** Name of Merchant */
    public var merchantName: String?

    public init(id: Int64? = nil, orderId: Int64, merchantId: Int, appId: Int64, externalId: String? = nil, status: Status? = nil, fulfillmentStatus: FulfillmentStatus? = nil, financialStatus: FinancialStatus? = nil, skus: [OrderSku]? = nil, shippingMethod: OrderShippingMethod? = nil, taxes: [OrderTax], subTotal: Int? = nil, shippingTotal: Int? = nil, taxTotal: Int? = nil, total: Int? = nil, transactions: [Transaction]? = nil, externalCheckout: Bool? = false, merchantName: String? = nil) {
        self.id = id
        self.orderId = orderId
        self.merchantId = merchantId
        self.appId = appId
        self.externalId = externalId
        self.status = status
        self.fulfillmentStatus = fulfillmentStatus
        self.financialStatus = financialStatus
        self.skus = skus
        self.shippingMethod = shippingMethod
        self.taxes = taxes
        self.subTotal = subTotal
        self.shippingTotal = shippingTotal
        self.taxTotal = taxTotal
        self.total = total
        self.transactions = transactions
        self.externalCheckout = externalCheckout
        self.merchantName = merchantName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case orderId = "order_id"
        case merchantId = "merchant_id"
        case appId = "app_id"
        case externalId = "external_id"
        case status
        case fulfillmentStatus = "fulfillment_status"
        case financialStatus = "financial_status"
        case skus
        case shippingMethod = "shipping_method"
        case taxes
        case subTotal = "sub_total"
        case shippingTotal = "shipping_total"
        case taxTotal = "tax_total"
        case total
        case transactions
        case externalCheckout = "external_checkout"
        case merchantName = "merchant_name"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(orderId, forKey: .orderId)
        try container.encode(merchantId, forKey: .merchantId)
        try container.encode(appId, forKey: .appId)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(fulfillmentStatus, forKey: .fulfillmentStatus)
        try container.encodeIfPresent(financialStatus, forKey: .financialStatus)
        try container.encodeIfPresent(skus, forKey: .skus)
        try container.encodeIfPresent(shippingMethod, forKey: .shippingMethod)
        try container.encode(taxes, forKey: .taxes)
        try container.encodeIfPresent(subTotal, forKey: .subTotal)
        try container.encodeIfPresent(shippingTotal, forKey: .shippingTotal)
        try container.encodeIfPresent(taxTotal, forKey: .taxTotal)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(transactions, forKey: .transactions)
        try container.encodeIfPresent(externalCheckout, forKey: .externalCheckout)
        try container.encodeIfPresent(merchantName, forKey: .merchantName)
    }
}

