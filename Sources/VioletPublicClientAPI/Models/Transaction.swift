//
// Transaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Order Transaction */
public struct Transaction: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case authorization = "AUTHORIZATION"
        case capture = "CAPTURE"
        case sale = "SALE"
        case void = "VOID"
        case refund = "REFUND"
    }
    public enum Status: String, Codable, CaseIterable {
        case processing = "processing"
        case completed = "completed"
    }
    public var id: Int64?
    /** ID of the Merchant receiving the transaction */
    public var merchantId: Int
    /** ID of the User who facilitated the transaction */
    public var sellerId: Int64?
    /** ID of the App that created the Order */
    public var appId: Int64
    /** ID of the Order the Transaction applies to */
    public var orderId: Int64?
    /** ID of the Bag the Transaction applies to */
    public var bagId: Int64
    /** ID of the referenced Payment Method */
    public var paymentMethodId: Int64
    /** ID of the Transaction in the Payment Gateway */
    public var gatewayTransactionId: String?
    /** Gateway processing the Transaction */
    public var gateway: String?
    /** Total amount being transacted */
    public var amount: Int?
    /** Currency the Transaction takes place in */
    public var currency: String?
    /** Transaction Type */
    public var type: ModelType?
    /** Error Code from gateway if error occurred */
    public var errorCode: String?
    /** Transaction Status */
    public var status: Status?
    /** Is this a test Transaction */
    public var test: Bool? = false
    /** Date of transaction creation */
    public var dateCreated: Date?
    /** Date of last transaction update */
    public var dateLastModified: Date?
    public var orderPaymentMethod: OrderPaymentMethod?

    public init(id: Int64? = nil, merchantId: Int, sellerId: Int64? = nil, appId: Int64, orderId: Int64? = nil, bagId: Int64, paymentMethodId: Int64, gatewayTransactionId: String? = nil, gateway: String? = nil, amount: Int? = nil, currency: String? = nil, type: ModelType? = nil, errorCode: String? = nil, status: Status? = nil, test: Bool? = false, dateCreated: Date? = nil, dateLastModified: Date? = nil, orderPaymentMethod: OrderPaymentMethod? = nil) {
        self.id = id
        self.merchantId = merchantId
        self.sellerId = sellerId
        self.appId = appId
        self.orderId = orderId
        self.bagId = bagId
        self.paymentMethodId = paymentMethodId
        self.gatewayTransactionId = gatewayTransactionId
        self.gateway = gateway
        self.amount = amount
        self.currency = currency
        self.type = type
        self.errorCode = errorCode
        self.status = status
        self.test = test
        self.dateCreated = dateCreated
        self.dateLastModified = dateLastModified
        self.orderPaymentMethod = orderPaymentMethod
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case merchantId = "merchant_id"
        case sellerId = "seller_id"
        case appId = "app_id"
        case orderId = "order_id"
        case bagId = "bag_id"
        case paymentMethodId = "payment_method_id"
        case gatewayTransactionId = "gateway_transaction_id"
        case gateway
        case amount
        case currency
        case type
        case errorCode = "error_code"
        case status
        case test
        case dateCreated = "date_created"
        case dateLastModified = "date_last_modified"
        case orderPaymentMethod
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(sellerId, forKey: .sellerId)
        try container.encode(appId, forKey: .appId)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encode(bagId, forKey: .bagId)
        try container.encode(paymentMethodId, forKey: .paymentMethodId)
        try container.encodeIfPresent(gatewayTransactionId, forKey: .gatewayTransactionId)
        try container.encodeIfPresent(gateway, forKey: .gateway)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(errorCode, forKey: .errorCode)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(test, forKey: .test)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateLastModified, forKey: .dateLastModified)
        try container.encodeIfPresent(orderPaymentMethod, forKey: .orderPaymentMethod)
    }
}

